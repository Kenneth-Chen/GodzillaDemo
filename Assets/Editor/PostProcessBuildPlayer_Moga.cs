/////////////////////////////////////////////////////////////////////////////////
//
//	PostProcessBuildPlayer_Moga.cs
//	Unity MOGA Plugin for Android/WP8
//	© 2013 Bensussen Deutsch and Associates, Inc. All rights reserved.
//
//	description:	Automates the Build by adding the necessary Framework and 
//					Code to the Visual Studio build.
//
/////////////////////////////////////////////////////////////////////////////////

using UnityEngine;
using System.Collections;
using System.IO;
using UnityEditor;
using UnityEditor.Callbacks;
using System;

public static class PostBuildTrigger
{
    /// Processbuild Function
    [PostProcessBuild] // <- this is where the magic happens
    public static void OnPostProcessBuild(BuildTarget target, string path)
    {
		#if UNITY_WP8
        string appName = PlayerSettings.productName;
		appName = appName.Replace(" ", "");
			
		string visualstudioPath = path + "/" + appName + "/" ;

		Debug.Log("MOGA WP8 - Starting OnPostProcessBuild") ;
		updateVisualStudioProject(visualstudioPath, appName) ;
		#endif
    }

	#if UNITY_WP8
    public static void updateVisualStudioProject(string visualstudioPath, string applicationName)
    {
        // STEP 1 : We open up the file generated by Unity and read into memory as a list of lines for processing
        string project = visualstudioPath + "Properties/WMAppManifest.xml" ;
        string[] lines = System.IO.File.ReadAllLines(project);

        // STEP 2 : We check if file has already been processed and only proceed if it hasn't, we'll do this by looping 
		// through the build files and see if ID_CAP_IDENTITY_PROXIMITY

        int i = 0 ;
        bool bFound = false ;
        bool bEnd = false ;

        while ( !bFound && !bEnd)
        {	
			if (i == lines.Length-1)
			{
				bEnd = true;
			}
			
            bFound = lines[i].Contains("ID_CAP_IDENTITY_PROXIMITY") ;

            ++i ;
        }

        if (bFound)
		{
            Debug.Log("MOGA WP8 -> ERROR: AppManifest has already been updated") ;
			Debug.Log("MOGA WP8 - Finished OnPostProcessBuild") ;
		}
        else
        {			
			// ---------------------------------------------------------------------------
			// Update WMAppManifest.xaml.cs ----------------------------------------------
			// ---------------------------------------------------------------------------
			
            FileStream filestr = new FileStream(project, FileMode.Create); //Create new file and open it for read and write, if the file exists overwrite it.
            filestr.Close() ;
            StreamWriter fCurrentManifestFile = new StreamWriter(project) ; // will be used for writing
			
            int iNbBuildConfigSet = 0 ; // can't be > 2
        
            i = 0 ;

            foreach (string line in lines)
            {                          
            	fCurrentManifestFile.WriteLine(line) ;

                if (line.StartsWith("    <Capabilities>") && iNbBuildConfigSet < 1)
                {
					fCurrentManifestFile.Write("\t  <Capability Name=\"ID_CAP_PROXIMITY\" />\n") ;
                    Debug.Log("MOGA WP8 -> Step 1: Added \"Proximity\" to WMAppManifest.xml");
                    ++iNbBuildConfigSet ;
                }
               
                ++i ;
            }

            fCurrentManifestFile.Close() ;
			
			// ---------------------------------------------------------------------------
			// Update MainPage.xaml.cs ---------------------------------------------------
			// ---------------------------------------------------------------------------
			
			Array.Clear(lines, 0, lines.Length);
			
			project = visualstudioPath + "MainPage.xaml.cs" ;
			lines = System.IO.File.ReadAllLines(project);
			
            FileStream filestrMainPage = new FileStream(project, FileMode.Create);
            filestrMainPage.Close() ;
            StreamWriter fCurrentMainPageFile = new StreamWriter(project) ;
			
            iNbBuildConfigSet = 0 ; // can't be > 2
        
            i = 0 ;
			bool nextLine = false;

            foreach (string line in lines)
            {                          
            	fCurrentMainPageFile.WriteLine(line) ;
				
				// Add using Moga.Windows.Phone.Unity;
				if (line.StartsWith("using Microsoft.Phone.Controls;") && iNbBuildConfigSet < 2)
                {
					fCurrentMainPageFile.Write("using Moga.Windows.Phone.Unity;\n") ;
                    Debug.Log("MOGA WP8 -> Step 2: Added \"MOGA namespace\" to MainPage.xaml.cs");
                    ++iNbBuildConfigSet ;
                } 
				
				// Add Controller Connect on Unity Loaded
                if (line.StartsWith("		private void Unity_Loaded()") && iNbBuildConfigSet < 2 || nextLine)
                {
					if (nextLine)
					{
						nextLine = false;
						
						// Check to see if the MogaControllerManager exists
						if (GameObject.Find("MogaControllerManager") != null)
						{
							Moga_ControllerManager mogaControllerManger = GameObject.Find("MogaControllerManager").GetComponent<Moga_ControllerManager>();
						
							if (mogaControllerManger.wp8poll)
							{
								fCurrentMainPageFile.Write("\t\t\tControllerUnity.Connect(ControllerMode.Poll);\n") ;
								Debug.Log("MOGA WP8 -> Step 3: Added \"Connect in Polling Mode\" to MainPage.xaml.cs");
							}
							else
							{
								fCurrentMainPageFile.Write("\t\t\tControllerUnity.Connect(ControllerMode.Listen);\n") ;
								Debug.Log("MOGA WP8 -> Step 3: Added \"Connect in Listener Mode\" to MainPage.xaml.cs");
							}
							++iNbBuildConfigSet ;
						}
						// Use Polling mode by default
						else
						{
							fCurrentMainPageFile.Write("\t\t\tControllerUnity.Connect(ControllerMode.Poll);\n") ;
							++iNbBuildConfigSet ;
                   			Debug.Log("MOGA WP8 -> Step 3: Added \"Connect\" to MainPage.xaml.cs");
						}
					}
					else
					{
						nextLine = true;
					}   
                }
               
                ++i ;
            }

            fCurrentMainPageFile.Close() ;
			
			// ---------------------------------------------------------------------------
			// Update App.xaml.cs --------------------------------------------------------
			// ---------------------------------------------------------------------------

			Array.Clear(lines, 0, lines.Length);
			
			project = visualstudioPath + "App.xaml.cs" ;
			lines = System.IO.File.ReadAllLines(project);
			
            FileStream filestrApp = new FileStream(project, FileMode.Create);
            filestrApp.Close() ;
            StreamWriter fCurrentAppFile = new StreamWriter(project) ;
			
            iNbBuildConfigSet = 0 ;
        
            i = 0 ;
			nextLine = false;
			bool alreadyRan = false;
			
            foreach (string line in lines)
            {                          
            	if (line.StartsWith("using Moga.Windows.Phone.Unity;"))
				{
					alreadyRan = true;
					Debug.Log ("MOGA WP8 -> Project already MOGA Enabled (Skip 5-8).\n");
				}
				else
				{
            		fCurrentAppFile.WriteLine(line);
				}
				
				// Add using Moga.Windows.Phone.Unity;
				if (line.StartsWith("using Microsoft.Phone.Shell;") && iNbBuildConfigSet < 4)
                {
					fCurrentAppFile.Write("using Moga.Windows.Phone.Unity;\n") ;
                    Debug.Log("MOGA WP8 -> Step 4: Added \"MOGA namespace\" to App.xaml.cs");
                    ++iNbBuildConfigSet ;
                } 
				
				// Add ControllerUnity.Activated() to Application_Activated()
                if (line.StartsWith("		private void Application_Activated") && !alreadyRan && iNbBuildConfigSet < 4 || nextLine)
                {
					if (nextLine)
					{
						nextLine = false;
						fCurrentAppFile.Write("\t\t\tControllerUnity.Activated();\n") ;
                    	Debug.Log("MOGA WP8 -> Step 5: Added \"ControllerUnity.Actived\" to App.xaml.cs");
						++iNbBuildConfigSet ;
					}
					else
					{
						nextLine = true;
					}
                }
				
				// Add ControllerUnity.Deactivated() to Application_Deactivate()
				if (line.StartsWith("			UnityPlayer.UnityApp.Deactivate();") && !alreadyRan && iNbBuildConfigSet < 4)
                {
					fCurrentAppFile.Write("\t\t\tControllerUnity.Deactivated();\n") ;
                    Debug.Log("MOGA WP8 -> Step 6: Added \"ControllerUnity.Deactived\" to App.xaml.cs");
                    ++iNbBuildConfigSet ;
                }  

                ++i ;
            }
			
			fCurrentAppFile.Close() ;
			
			// ---------------------------------------------------------------------------
			// Update AppName.csproj -----------------------------------------------------
			// ---------------------------------------------------------------------------

			Array.Clear(lines, 0, lines.Length);
			
			project = visualstudioPath + applicationName + ".csproj" ;
			lines = System.IO.File.ReadAllLines(project);
			
            FileStream filestrCsProj = new FileStream(project, FileMode.Create);
            filestrCsProj.Close() ;
            StreamWriter fCurrentCsProjFile = new StreamWriter(project) ;
			
            iNbBuildConfigSet = 0 ;
        
            i = 0 ;
			nextLine = false;
			
			bool armLibrary = true;
			
            foreach (string line in lines)
            {        
            	fCurrentCsProjFile.WriteLine(line);
				
				// Add Controller.UnityPlugin.cs to Visual Studio CSPROJ file
				if (line.StartsWith("    <Compile Include=\"LocalizedStrings.cs") && !alreadyRan && iNbBuildConfigSet < 2)
                {
					fCurrentCsProjFile.Write("\t<Compile Include=\"Controller.UnityPlugin.cs\" />\n") ;
                    Debug.Log("MOGA WP8 -> Step 7: Added \"Controller.UnityPlugin.cs\" to Visual Studio CSProj file.");
                    ++iNbBuildConfigSet ;
                }
				
				// Add Moga.Windows.Phone Library to Project
				if (line.StartsWith("      <HintPath>Assembly-CSharp-firstpass.dll</HintPath>") && !alreadyRan && iNbBuildConfigSet < 2 || nextLine)
				{
					if (nextLine)
					{
						nextLine = false;

						// Check to see if the MogaControllerManager exists
						if (GameObject.Find("MogaControllerManager") != null)
						{
							Moga_ControllerManager mogaControllerManger = GameObject.Find("MogaControllerManager").GetComponent<Moga_ControllerManager>();
							
							if (mogaControllerManger.armlib)
							{
								fCurrentCsProjFile.Write("\t<Reference Include=\"Moga.Windows.Phone\">\n");
								fCurrentCsProjFile.Write("\t\t<HintPath>ARM\\Moga.Windows.Phone.winmd</HintPath>\n");
								fCurrentCsProjFile.Write("\t</Reference>\n");
								
		                    	Debug.Log("MOGA WP8 -> Step 8: Added \"ARM Library\" to Visual Studio Project");
							}
							else
							{
								fCurrentCsProjFile.Write("\t<Reference Include=\"Moga.Windows.Phone\">\n");
								fCurrentCsProjFile.Write("\t\t<HintPath>x86\\Moga.Windows.Phone.winmd</HintPath>\n");
								fCurrentCsProjFile.Write("\t</Reference>\n");
								armLibrary = false;
		                    	Debug.Log("MOGA WP8 -> Step 8: Added \"x86 Library\" to Visual Studio Project");
							}
							++iNbBuildConfigSet ;
						}
						// Use Arm library by default
						else
						{
							fCurrentCsProjFile.Write("\t<Reference Include=\"Moga.Windows.Phone\">\n");
							fCurrentCsProjFile.Write("\t\t<HintPath>ARM\\Moga.Windows.Phone.winmd</HintPath>\n");
							fCurrentCsProjFile.Write("\t</Reference>\n");
								
		                    Debug.Log("MOGA WP8 -> Step 8: Added \"ARM Library\" to Visual Studio Project");
							++iNbBuildConfigSet ;
						}
					}
					else
					{
						nextLine = true;
					}
                }

                ++i ;
            }

            fCurrentCsProjFile.Close() ;
			
			// ---------------------------------------------------------------------------------
			// Move Controller.UnityPlugin.cs and Moga.Windows.Phone.dll to Project Directory
			// ---------------------------------------------------------------------------------
			
			// TODO
			if (Directory.Exists (Application.dataPath  + "/Plugins/winphone8"))
			{
    			string[] pluginPath = Directory.GetFiles(Application.dataPath + "/Plugins/winphone8/", "Controller.UnityPlugin.cs", SearchOption.AllDirectories);
				
				string[] libraryPath;
				
				// Check to see if the MogaControllerManager exists
				if (armLibrary)
				{
					libraryPath = Directory.GetFiles(Application.dataPath + "/Plugins/winphone8/ARM", "Moga.Windows.Phone.dll", SearchOption.AllDirectories);
				}
				else
				{
					libraryPath = Directory.GetFiles(Application.dataPath + "/Plugins/winphone8/x86", "Moga.Windows.Phone.dll", SearchOption.AllDirectories);
				}

				// Move Plugin to Visual Studio Build directory.
  				if (pluginPath.Length == 0)
				{
					Debug.Log("MOGA WP8 -> ERROR: winphone8/Controller.UnityPlugin.cs is missing") ;
				}
				else
				{
					if (!System.IO.File.Exists(visualstudioPath + "Controller.UnityPlugin.cs"))
					{
						File.Copy("Assets/Plugins/winphone8/Controller.UnityPlugin.cs", visualstudioPath + "Controller.UnityPlugin.cs");
						Debug.Log("MOGA WP8 -> Step 9: Copied \"Controller.UnityPlugin.cs\" to Visual Studio Directory");
					}
					else
					{
						Debug.Log("MOGA WP8 -> Step 9: Skipped \"Controller.UnityPlugin.cs\" already present");
					}
				}
				
				// Move Library to Visual Studio Build Directory
				if (libraryPath.Length == 0)
				{
					Debug.Log("MOGA WP8 -> ERROR: winphone8/Moga.Windows.Phone.dll is missing") ;
				}
				else
				{
					if (armLibrary)
					{
						if (!System.IO.File.Exists(visualstudioPath + "ARM"))
						{
							CopyDirectory("Assets/Plugins/winphone8/ARM", visualstudioPath + "ARM");
							Debug.Log("MOGA WP8 -> Step 10: Copied \"ARM\" to Visual Studio Directory");
						}
						else
						{
							Debug.Log("MOGA WP8 -> Step 10: Skipped \"ARM\" already present");
						}
					}
					else
					{
						if (!System.IO.File.Exists(visualstudioPath + "x86"))
						{
							CopyDirectory("Assets/Plugins/winphone8/x86", visualstudioPath + "x86");
							Debug.Log("MOGA WP8 -> Step 10: Copied \"x86\" to Visual Studio Directory");
						}
						else
						{
							Debug.Log("MOGA WP8 -> Step 10: Skipped \"x86\" already present");
						}
					}
				}
			}
			else
			{
				Debug.Log("MOGA WP8 -> ERROR: winphone8 Plugin directory is missing") ;
			}
				
			
			// ---------------------------------------------------------------------------
			// Add Namespaces to Controller.UnityPlugin.cs -------------------------------
			// ---------------------------------------------------------------------------
			
			Array.Clear(lines, 0, lines.Length);
			
			project = visualstudioPath + "Controller.UnityPlugin.cs" ;
			lines = System.IO.File.ReadAllLines(project);
			
            FileStream filestrUnityPlugin = new FileStream(project, FileMode.Create);
            filestrUnityPlugin.Close() ;
            StreamWriter fCurrentPluginFile = new StreamWriter(project) ;
			
            iNbBuildConfigSet = 0 ;
        
            i = 0 ;
			
            foreach (string line in lines)
            {
			    if (line.StartsWith("/* REMOVE ME") || line.StartsWith("REMOVE ME */") )
                {
                    // Unity disliked having this file in the Assets folder, so we had to comment out
					// the code, we need to strip these comments out.
                }
                else
                {   
            		fCurrentPluginFile.WriteLine(line) ;
				}
				
				++i;
			}
			
			fCurrentPluginFile.Close() ;
			
			Debug.Log("MOGA WP8 -> Step 11: Stripped Comment Tags from Controller.UnityPlugin.cs") ;
			Debug.Log("MOGA WP8 - Finished OnPostProcessBuild") ;
        }
    }
	
	public static void CopyDirectory(string sourceDirectory, string targetDirectory)
    {
        DirectoryInfo diSource = new DirectoryInfo(sourceDirectory);
        DirectoryInfo diTarget = new DirectoryInfo(targetDirectory);

        CopyAll(diSource, diTarget);
    }

    public static void CopyAll(DirectoryInfo source, DirectoryInfo target)
    {
        // Check if the target directory exists, if not, create it.
        if (Directory.Exists(target.FullName) == false)
        {
            Directory.CreateDirectory(target.FullName);
        }

        // Copy each file into it's new directory.
        foreach (FileInfo fi in source.GetFiles())
        {
            Console.WriteLine(@"Copying {0}\{1}", target.FullName, fi.Name);
            fi.CopyTo(Path.Combine(target.ToString(), fi.Name), true);
        }

        // Copy each subdirectory using recursion.
        foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
        {
            DirectoryInfo nextTargetSubDir =
                target.CreateSubdirectory(diSourceSubDir.Name);
            CopyAll(diSourceSubDir, nextTargetSubDir);
        }
    }
	#endif
}